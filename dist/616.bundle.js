"use strict";(self.webpackChunkprobability=self.webpackChunkprobability||[]).push([[616,831],{616:(e,t,n)=>{n.r(t),n.d(t,{load:()=>i});var s=n(831),l=n(157);const i=async e=>{const t=document.createElement("div");t.style.display="grid",t.style.gridTemplateColumns="160px",t.style.color="white",t.style.textAlign="center";const n=new s.FlipperContainer,i=document.createElement("div");i.style.display="grid",i.style.gridTemplateColumns="160px",i.style.color="white",i.style.textAlign="center";const r=document.createElement("p");r.innerHTML="Coin Container",i.appendChild(r);const a=document.createElement("l");i.appendChild(a);const o=()=>{const e=n.summarize();a.replaceChildren(),Object.keys(e.weight_buckets).forEach((t=>{const n=document.createElement("li");n.innerHTML=`${t} : ${e.weight_buckets[t]}`,a.appendChild(n)}))};let c=.5;const p=document.createElement("p");p.innerHTML="New Coin",t.appendChild(p);const d=document.createElement("div");d.style.display="grid",d.style.gridTemplateColumns="repeat(2, 80px)";const u=document.createElement("p");u.innerHTML="H: "+c.toString();const h=document.createElement("p");h.innerHTML="T: "+(1-c).toString(),d.appendChild(u),d.appendChild(h),t.appendChild(d);const m=document.createElement("div");m.style.display="grid",m.style.gridTemplateColumns="repeat(2, 80px)";const g=document.createElement("input");g.type="number",g.min="0.0",g.max="1.0",g.step="0.01",g.defaultValue=c.toString(),g.onchange=e=>{c=parseFloat(e.target.value),u.innerHTML="H: "+c.toPrecision(2),h.innerHTML="T: "+(1-c).toPrecision(2)};const f=document.createElement("input");f.type="range",f.min="0.0",f.max="1.0",f.step="0.01",f.defaultValue=c.toString(),f.onchange=e=>{c=parseFloat(e.target.value),g.value=parseFloat(e.target.value),u.innerHTML="H: "+c.toPrecision(2),h.innerHTML="T: "+(1-c).toPrecision(2)},m.appendChild(g),m.appendChild(f),t.appendChild(m);const y=document.createElement("button");y.innerText="Add Coin",y.onclick=()=>{n.push(new s.Coin([c,1-c])),o()},t.appendChild(y);const _=document.createElement("div");_.style.display="grid",_.style.gridTemplateColumns="repeat(2, 80px)";let C=1;const b=document.createElement("input");b.type="number",b.min="1",b.defaultValue=C.toString(),b.onchange=e=>{C=parseInt(e.target.value)};const w=document.createElement("button");w.innerText="Add N",w.onclick=()=>{for(let e=0;e<C;e++)n.push(new s.Coin([c,1-c]));o()},_.appendChild(b),_.appendChild(w),t.appendChild(_);const x=document.createElement("button");x.innerText="Remove Last",x.onclick=()=>{n.pop(),o()},t.appendChild(x);const E=document.createElement("button");E.innerText="Empty Container",E.onclick=()=>{n.clear(),o()},t.appendChild(E);const T=document.createElement("div");T.style.width="800px",T.style.height="800px",T.style.position="absolute",T.style.top="0",T.style.top="0",T.style.bottom="0",T.style.left="0",T.style.right="0",T.style.margin="auto",T.style.border="white 1px solid",T.style.color="white",T.style.textAlign="center",T.style.textWrap="wrap";const k=(e,t)=>{const n=t.reduce(((e,t)=>e+t)),s=[{x:e,y:t,type:"bar",text:t.map((e=>`\n                ${e} : ${(e/n*100).toPrecision(4)}%\n                `)),textposition:"auto",hoverinfo:"none"}];l.newPlot(T,s,{title:"Result",xaxis:{title:"Face"},yaxis:{title:"Count"}})},H=document.createElement("p");H.style.textWrap="wrap",T.appendChild(H);const v=document.createElement("p");v.style.textWrap="wrap",T.appendChild(v);const M=document.createElement("div");M.style.display="grid",M.style.gridTemplateColumns="repeat(2, 80px)",M.style.alignItems="center",M.style.justifyContent="center";let L=1;const q=document.createElement("p");q.innerHTML="Num Trials",M.appendChild(q);const A=document.createElement("input");A.type="number",A.min="1",A.defaultValue=L.toString(),A.onchange=e=>{L=parseInt(e.target.value),console.log(L)},M.appendChild(A);let F=!1;const P=document.createElement("div"),j=document.createElement("input");j.style.height="16px",j.type="checkbox",j.defaultChecked=F,j.onchange=e=>{F=e.target.checked};const S=document.createElement("p");S.innerHTML="Replace?",P.appendChild(S),P.appendChild(j),M.appendChild(P);const $=document.createElement("button");$.innerText="Flip Rnd",$.onclick=()=>{const e=n.flip_random(L,F);T.replaceChildren(),e&&((0,s.is_flip_result)(e)&&(T.appendChild(H),H.innerHTML=e.label),(0,s.is_flip_sequence_result)(e)&&k(["H","T"],[e.stats.data.H.count||0,e.stats.data.T.count||0]))},M.appendChild($),t.appendChild(M);const O=document.createElement("button");return O.innerText="Flip All",O.onclick=()=>{const e=n.flip_all(L);T.replaceChildren(),T.appendChild(H),H.innerHTML=`${e.flatMap((e=>e.sequence)).map((e=>e.label))}`;const t=e.reduce(((e,t)=>(e[0]+=t.stats.data.H?.count||0,e[1]+=t.stats.data.T?.count||0,e)),[0,0]);k(["H","T"],t)},t.appendChild(O),e([t,i,T]),()=>{}}},831:(e,t,n)=>{n.r(t),n.d(t,{AlwaysHeadsCoin:()=>c,AlwaysTailsCoin:()=>p,Coin:()=>a,FairCoin:()=>o,Flipper:()=>r,FlipperContainer:()=>d,is_flip_result:()=>l,is_flip_sequence_result:()=>i});class s{stats={};get_total(){let e=0;return Object.keys(this.stats).forEach((t=>{e+=this.stats[t].count})),e}track_stat(e){this.stats[e]={count:0,percentage:0}}increment(e){Object.keys(this.stats).includes(e)||this.track_stat(e),this.stats[e].count+=1;const t=this.get_total();Object.keys(this.stats).forEach((e=>{this.stats[e].percentage=this.stats[e].count/t}))}get data(){return this.stats}}function l(e){return e&&"string"==typeof e.label}function i(e){return e&&Array.isArray(e.sequence)}class r{_weights;_labels;constructor(e,t){if(1!==e.reduce(((e,t)=>e+t)))throw new Error("Weights must sum to 1.0");if(e.length!==t.length)throw new Error("Weights and labels must have same length");this._weights=e,this._labels=t}get weights(){return this._weights}get labels(){return this._labels}flip_sequence(e){const t=[],n=new s;for(let s=0;s<e;s++){const e=this.flip();t.push(e),n.increment(e.label)}return{sequence:t,stats:n}}}class a extends r{constructor(e){super(e,["H","T"])}flip(){const e=Math.random();let t=0;for(const[n,s]of this._weights.entries())if(t+=s,e<=t)return{weight_index:n,label:this._labels[n]};return{weight_index:this._weights[this._weights.length-1],label:this._labels[this._weights.length-1]}}}class o extends a{constructor(){super([.5,.5])}}class c extends a{constructor(){super([1,0])}}class p extends a{constructor(){super([0,1])}}class d{_flippers;constructor(){this._flippers=[]}get flippers(){return this._flippers}push(e){this._flippers.push(e)}pop(){this._flippers.pop()}clear(){this._flippers=[]}flip_all(e=1){const t=[];return this._flippers.forEach((n=>{t.push(n.flip_sequence(e))})),t}choose_random(){const e=Math.random(),t=1/this._flippers.length;let n=0;for(const s of this._flippers)if(n+=t,e<=n)return s;return this._flippers[this._flippers.length-1]}flip_random(e=1,t=!1){if(0===this._flippers.length)return null;if(1===e)return this.choose_random().flip();if(t){const t={sequence:[],stats:new s};for(let n=0;n<e;n++){const e=this.choose_random().flip();t.sequence.push(e),t.stats.increment(e.label)}return t}return this.choose_random().flip_sequence(e)}summarize(){const e=this._flippers.length,t={};return this._flippers.forEach((e=>{const n=`[${e.weights.map((e=>e.toPrecision(2)))}]`;Object.keys(t).includes(n)?t[n]+=1:t[n]=1})),{num_flippers:e,weight_buckets:t}}}}}]);